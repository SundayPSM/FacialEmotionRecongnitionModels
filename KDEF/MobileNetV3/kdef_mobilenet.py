# -*- coding: utf-8 -*-
"""KDEF_mobileNet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18BVzqGBq66Q2Mb7n_tXNTMexN2BK0neY
"""

gpu_info=!nvidia-smi
gpu_info='\n'.join(gpu_info)
if gpu_info.find('failed')>=0:
  print("Not Connected to a gpu")
else:
  print(gpu_info)

import tensorflow as tf
tf.test.gpu_device_name()

from google.colab import drive
drive.mount('/content/drive')

!pip install MTCNN

!unzip "/content/drive/MyDrive/Research/KDEF_and_AKDEF.zip"

# !unzip "/content/drive/MyDrive/Research/Cropped_KDEF_FER.zip"

!ls "KDEF_and_AKDEF"

import os
import shutil

# for i in os.listdir("KDEF_and_AKDEF"): 
#   print(i)
#   if(i.find(".TXT") or i.find(".txt")):
#     print("")
#   else:
#     for j in os.listdir("KDEF_and_AKDEF/"+i):
#       print(j)

# !sudo apt install python3-pip

# !python --version

def switch(emotion,source):
  if(emotion=="AN"):
    if not os.path.exists("KDEF/Angry"):
      os.makedirs("KDEF/Angry")
      shutil.copy(source,"KDEF/Angry/")

    else:
      shutil.copy(source,"KDEF/Angry/")
    
  elif(emotion=="DI"):
    if not os.path.exists("KDEF/Disgust"):
      os.makedirs("KDEF/Disgust")
      shutil.copy(source,"KDEF/Disgust/")

    else:
      shutil.copy(source,"KDEF/Disgust/")
  elif(emotion=="AF"):
    if not os.path.exists("KDEF/Fear"):
      os.makedirs("KDEF/Fear/")
      shutil.copy(source,"KDEF/Fear/")

    else:
      shutil.copy(source,"KDEF/Fear/")
  elif(emotion=="HA"):
    if not os.path.exists("KDEF/Happy"):
      os.makedirs("KDEF/Happy")
      shutil.copy(source,"KDEF/Happy/")

    else:
      shutil.copy(source,"KDEF/Happy/")
  elif(emotion=="NE"):
    if not os.path.exists("KDEF/Neutal"):
      os.makedirs("KDEF/Neutal")
      shutil.copy(source,"KDEF/Neutal/")

    else:
      shutil.copy(source,"KDEF/Neutal/")
  elif(emotion=="SA"):
    if not os.path.exists("KDEF/Sad"):
      os.makedirs("KDEF/Sad")
   
      shutil.copy(source,"KDEF/Sad/")

    else:
      shutil.copy(source,"KDEF/Sad/")
  elif(emotion=="SU"):
    if not os.path.exists("KDEF/Surprise"):
      os.makedirs("KDEF/Surprise")
      shutil.copy(source,"KDEF/Surprise/")

    else:
      shutil.copy(source,"KDEF/Surprise/")

# !rm -r "KDEF"

if not os.path.exists("KDEF"):
  os.mkdir("KDEF")

for i in os.listdir("KDEF_and_AKDEF/KDEF"):
  for j in os.listdir("KDEF_and_AKDEF/KDEF/"+i):
    src=("KDEF_and_AKDEF/KDEF/"+i+"/"+j)
    sub=j[4:6]
    # print(sub)
    switch(sub,src)
    
  print(i)

switch("AF","KDEF_and_AKDEF/KDEF/BF18/BF18AFHL.JPG")

!zip "KDEF_FER.zip" "KDEF"
# !cp -r

!cp "KDEF_FER.zip" "/content/drive/MyDrive/Research/"

from mtcnn import MTCNN
import cv2
import os, glob
import numpy as np
# from tqdm import tqdm_notebook
from tqdm.notebook import tqdm_notebook
import shutil
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
import keras
import numpy as np
import tensorflow as tf
from tensorflow import keras

def crop_image(img, detector): 
    data=detector.detect_faces(img)
    biggest=0
    if data !=[]:
        for faces in data:
            box=faces['box']            
            area = box[3]  * box[2]
            if area>biggest:
                biggest=area
                bbox=box 
        bbox[0]= 0 if bbox[0]<0 else bbox[0]
        bbox[1]= 0 if bbox[1]<0 else bbox[1]
        img=img[bbox[1]: bbox[1]+bbox[3],bbox[0]: bbox[0]+ bbox[2]]        
        return (True, img) 
    else:
        return (False, None)

def align_crop_resize(src_list, dest_list, detector, height=None, width= None): 
    success_count=0
    for i,f in tqdm_notebook(enumerate(src_list)):
        dest_dir = os.path.dirname(dest_list[i])
        if not os.path.isdir(dest_dir):
            os.makedirs(dest_dir)
      
        if os.path.isfile(src_list[i]):
            try:
                img=cv2.imread(src_list[i]) 
                shape=img.shape
                  
                cstatus, img=crop_image(img, detector)
                if cstatus:
                    if height != None and width !=None:
                        img=cv2.resize(img, (height, width)) 

                    cv2.imwrite(dest_list[i], img) 
                    success_count +=1
            except:
                print('file ', src_list[i], ' is a bad image file')
    return success_count

detector = MTCNN()
src_list = glob.glob("/content/KDEF/*/*")
dest_list = [src_list[i].replace("KDEF", "Cropped_KDEF") for i in range(len(src_list))] 

align_crop_resize(src_list, dest_list, detector, height=224, width= 224)

!zip "Cropped_KDEF_FER.zip" "Cropped_KDEF"
!cp "Cropped_KDEF_FER.zip" "/content/drive/MyDrive/Research/"
# !cp "Cropped_KDEF_FER.zip" "/content/drive/MyDrive/Research/"

base_model = keras.applications.MobileNetV3Large(
    weights='imagenet',  # Load weights pre-trained on ImageNet.
    input_shape=(224, 224, 3),
    include_top=False,
    classes=7
) 

base_model.trainable = False

inputs = keras.Input(shape=(224, 224, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_KDEF"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=50, validation_data=valid_dataset)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('MobileNetV3_KDEF_model_accuracy.png')
!cp MobileNetV3_KDEF_model_accuracy.png "/content/drive/MyDrive/Research"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('MobileNetV3_KDEF_model_loss.png')
!cp MobileNetV3_KDEF_model_loss.png "/content/drive/MyDrive/Research"
plt.show()

model.save("mobilenetv3_KDEF")
import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("mobilenetv3_KDEF") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model.
with open('mobilenetv3_KDEF.tflite', 'wb') as f:
  f.write(tflite_model)

!cp mobilenetv3_KDEF.tflite "/content/drive/MyDrive/Research"

print("Training Accuracy ",max(history.history["accuracy"]))
print("Testing Accuracy ",max(history.history["val_accuracy"]))

!rm -r "Cropped_KDEF_FER.zip"

