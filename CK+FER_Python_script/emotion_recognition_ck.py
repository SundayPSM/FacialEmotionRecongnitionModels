# -*- coding: utf-8 -*-
"""Emotion Recognition ck.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9dDkliBZNlrUNvq4YXMtV0M2Vab9zAw
"""

from google.colab import drive
drive.mount('/content/drive')

! pip install MTCNN

pwd

from mtcnn import MTCNN
import cv2
import os, glob
import numpy as np
# from tqdm import tqdm_notebook
from tqdm.notebook import tqdm_notebook
import shutil
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
import keras

!pip install unrar
!unrar x "/content/drive/MyDrive/Datasets/CKPLUS.rar"

def crop_image(img, detector): 
    data=detector.detect_faces(img)
    biggest=0
    if data !=[]:
        for faces in data:
            box=faces['box']            
            area = box[3]  * box[2]
            if area>biggest:
                biggest=area
                bbox=box 
        bbox[0]= 0 if bbox[0]<0 else bbox[0]
        bbox[1]= 0 if bbox[1]<0 else bbox[1]
        img=img[bbox[1]: bbox[1]+bbox[3],bbox[0]: bbox[0]+ bbox[2]]        
        return (True, img) 
    else:
        return (False, None)

def align_crop_resize(src_list, dest_list, detector, height=None, width= None): 
    success_count=0
    for i,f in tqdm_notebook(enumerate(src_list)):
        dest_dir = os.path.dirname(dest_list[i])
        if not os.path.isdir(dest_dir):
            os.makedirs(dest_dir)
      
        if os.path.isfile(src_list[i]):
            try:
                img=cv2.imread(src_list[i]) 
                shape=img.shape
                  
                cstatus, img=crop_image(img, detector)
                if cstatus:
                    if height != None and width !=None:
                        img=cv2.resize(img, (height, width)) 

                    cv2.imwrite(dest_list[i], img) 
                    success_count +=1
            except:
                print('file ', src_list[i], ' is a bad image file')
    return success_count

detector = MTCNN()
src_list = glob.glob("/content/CKPLUS/CK+48/*/*")
dest_list = [src_list[i].replace("CKPLUS", "Cropped_CKPLUS") for i in range(len(src_list))] 

align_crop_resize(src_list, dest_list, detector, height=224, width= 224)

"""Training"""

import numpy as np
import tensorflow as tf
from tensorflow import keras

# base_model = keras.applications.E(
#     weights='imagenet',  # Load weights pre-trained on ImageNet.
#     input_shape=(224, 224, 3),
#     include_top=False
# )

"""# Model"""

base_model = keras.applications.MobileNetV3Large(
    weights='imagenet',  # Load weights pre-trained on ImageNet.
    input_shape=(224, 224, 3),
    include_top=False
    classes=7
) 

base_model.trainable = False

inputs = keras.Input(shape=(224, 224, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_CKPLUS/CK+48"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=20, validation_data=valid_dataset)

keras.utils.plot_model(model)
# keras.utils.plot_model(model, show_shapes=False, show_dtype=False, show_layer_names=True, rankdir='TB', expand_nested=True, dpi=96, layer_range=None, show_layer_activations=False)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('MobileNetV2_CKPLUS_model_accuracy.png')
!cp MobileNetV2_CKPLUS_model_accuracy.png "/content/drive/MyDrive/Datasets"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('MobileNetV2_CKPLUS_model_loss.png')
!cp MobileNetV2_CKPLUS_model_loss.png "/content/drive/MyDrive/Datasets"
plt.show()

model.save("mobilenetv2_CKPLUS")

# saved_model_dir="mobilenetv2_CKPLUS"
# converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)
# converter.optimizations = [tf.lite.Optimize.DEFAULT]
# tflite_quant_model = converter.convert()

# # Save the model.
# with open('mobilenetv2_CKPLUS.tflite', 'wb') as f:
#   f.write(tflite_quant_model)

"""Convert the model to tenserflow lite in .tflite"""

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("mobilenetv2_CKPLUS") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model.
with open('mobilenetv2_CKPLUS.tflite', 'wb') as f:
  f.write(tflite_model)

"""Save the .tflite to Drive"""

!cp mobilenetv2_CKPLUS.tflite "/content/drive/MyDrive/Datasets"

os.listdir()

"""Model InceptionV3
On CK+

"""

base_model = keras.applications.InceptionV3(
    weights='imagenet',  # Load weights pre-trained on ImageNet.
    input_shape=(229, 229, 3),
    include_top=False,
    classifier_activation="softmax",
    classes=7
) 

base_model.trainable = False

# inputs = keras.Input(shape=(224, 224, 3))
inputs = keras.Input(shape=(229, 229, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_CKPLUS/CK+48"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(229, 229), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(229, 229), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=50, validation_data=valid_dataset)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('InceptionV3 model accuracy on CK+')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('InceptionV3_CKPLUS_model_accuracy.png')
!cp InceptionV3_CKPLUS_model_accuracy.png "/content/drive/MyDrive/Datasets"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('InceptionV3 model loss on CK+')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('InceptionV3_CKPLUS_model_loss.png')
!cp InceptionV3_CKPLUS_model_loss.png "/content/drive/MyDrive/Datasets"
plt.show()

#Save the Model 
model.save("InceptionV3_CKPLUS")

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("InceptionV3_CKPLUS") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model in the .tflite .
with open('InceptionV3_CKPLUS.tflite', 'wb') as f:
  f.write(tflite_model)

# copy the .tflite to Drive
!cp InceptionV3_CKPLUS.tflite "/content/drive/MyDrive/Datasets"

"""EfficientNetB7 with CK+ """

base_model = keras.applications.efficientnet.EfficientNetB7(
    weights = 'imagenet',  # Load weights pre-trained on ImageNet.
    input_shape = (224, 224, 3),
    include_top = False,
    classifier_activation = "softmax",
    classes = 7
) 

base_model.trainable = False

# inputs = keras.Input(shape=(224, 224, 3))
inputs = keras.Input(shape=(224, 224, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_CKPLUS/CK+48"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=50, validation_data=valid_dataset)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('EfficientNetB7 model accuracy on CK+')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('EfficientNetB7_CKPLUS_model_accuracy.png')
!cp EfficientNetB7_CKPLUS_model_accuracy.png "/content/drive/MyDrive/Datasets"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('EfficientNetB7 model loss on CK+')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('EfficientNetB7_CKPLUS_model_loss.png')
!cp EfficientNetB7_CKPLUS_model_loss.png "/content/drive/MyDrive/Datasets"
plt.show()

#Save the Model 
model.save("EfficientNetB7_CKPLUS")

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("EfficientNetB7_CKPLUS") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model in the .tflite .
with open('EfficientNetB7_CKPLUS.tflite', 'wb') as f:
  f.write(tflite_model)

# copy the .tflite to Drive
!cp EfficientNetB7_CKPLUS.tflite "/content/drive/MyDrive/Datasets"

"""VGG16 with CK+"""

base_model = keras.applications.vgg16.VGG16(
    weights = 'imagenet',  # Load weights pre-trained on ImageNet.
    input_shape = (224, 224, 3),
    include_top = False,
    classifier_activation = "softmax",
    classes = 7
) 

base_model.trainable = False

# inputs = keras.Input(shape=(224, 224, 3))
inputs = keras.Input(shape=(224, 224, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_CKPLUS/CK+48"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=20, validation_data=valid_dataset)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('VGG16 model accuracy on CK+')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('VGG16_CKPLUS_model_accuracy.png')
!cp VGG16_CKPLUS_model_accuracy.png "/content/drive/MyDrive/Datasets"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('VGG16 model loss on CK+')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('VGG16_CKPLUS_model_loss.png')
!cp VGG16_CKPLUS_model_loss.png "/content/drive/MyDrive/Datasets"
plt.show()

#Save the Model 
model.save("VGG16_CKPLUS")

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("VGG16_CKPLUS") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model in the .tflite .
with open('VGG16_CKPLUS.tflite', 'wb') as f:
  f.write(tflite_model)

# copy the .tflite to Drive
!cp VGG16_CKPLUS.tflite "/content/drive/MyDrive/Datasets"

"""ResNet50 with CK+"""

base_model = keras.applications.resnet50.ResNet50(
    weights = 'imagenet',  # Load weights pre-trained on ImageNet.
    input_shape = (224, 224, 3),
    include_top = False,
    classifier_activation = "softmax",
    classes = 7
) 

base_model.trainable = False

# inputs = keras.Input(shape=(224, 224, 3))
inputs = keras.Input(shape=(224, 224, 3))

x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(7, activation="softmax")(x)

model = keras.Model(inputs, outputs)

path="/content/Cropped_CKPLUS/CK+48"

# dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical")
train_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="training", seed=42)
valid_dataset = keras.preprocessing.image_dataset_from_directory(path, image_size=(224, 224), label_mode="categorical", validation_split=0.3, subset="validation", seed=42)

model.compile(optimizer=keras.optimizers.Adam(),
              loss="categorical_crossentropy",
              metrics=["accuracy"])
# model.fit(dataset, epochs=20, validation_split=0.2)
history = model.fit(train_dataset, epochs=20, validation_data=valid_dataset)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('ResNet50 model accuracy on CK+')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('ResNet50_CKPLUS_model_accuracy.png')
!cp ResNet50_CKPLUS_model_accuracy.png "/content/drive/MyDrive/Datasets"
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('ResNet50 model loss on CK+')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.savefig('ResNet50_CKPLUS_model_loss.png')
!cp ResNet50_CKPLUS_model_loss.png "/content/drive/MyDrive/Datasets"
plt.show()

#Save the Model 
model.save("ResNet50_CKPLUS")

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model("ResNet50_CKPLUS") # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model in the .tflite .
with open('ResNet50_CKPLUS.tflite', 'wb') as f:
  f.write(tflite_model)

# copy the .tflite to Drive
!cp ResNet50_CKPLUS.tflite "/content/drive/MyDrive/Datasets"

